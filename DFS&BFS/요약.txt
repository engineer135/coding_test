# DFS
DEPTH-FIRST SEARCH 
깊이우선탐색

# 그래프 표현 방법
인접행렬 - 2차원 배열로 그래프의 연결관계 표현
EX) 
INF = 999999999 # 무한의 비용 선언
graph = [
    [0,7,5],
    [7,0,INF],
    [5,INF,0],
]
[0]노드는 [1]노드와 7만큼 거리를 가지고 연결되어있고, [2]노드와는 5만큼의 거리를 가지고 연결되어 있음
[1]노드는 [0]노드와 7만큼 거리를 가지고 연결되어있고, [1]노드는 본인이므로 0, [2]노드와는 INF 즉 연결이 안되어있음
이런식으로 해석한다.

인접리스트 - 리스트로 그래프의 연결 관계 표현
같은 그래프를 인접 리스트로 표현하면?
graph = [[] for _ in range(3)]
graph[0].append((1,7))
graph[0].append((2,5))
graph[1].append((0,7))
graph[2].append((0,5))
# [[(1,7),(2,5)],[(0,7)],[(0,5)]]
이런식으로 표현됨

장단점
- 인접행렬은 모든 관계를 저장하므로 노드 개수가 많을수록 메모리가 불필요하게 낭비됨 / 인접리스트 방식은 연결된 정보만을 저장 메모리를 효율적으로 사용
- 인접리스트 방식은 인접행렬 방식에 비해 특정한 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 느림.
  예를 들면 노드1과 노드7이 연결되어있는지 확인하려면, 인접행렬 방식은 graph[1][7]만 확인하면 끝. 인접리스트는 노드1에 대한 인접 리스트를 앞에서부터 확인해야함.